{{define "index.gohtml"}}
<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Machine Shop Scheduler</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Pico.css (classless) -->
    <link rel="stylesheet" href="https://unpkg.com/@picocss/pico@latest/css/pico.min.css">
    <!-- Your minimal custom styles -->
    <link rel="stylesheet" href="/static/scheduler.css">
    <!-- Alpine (for small interactions/animations you already use) -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>

<body x-data="schedulerUI()" x-init="init()">
    <main class="container">

        <!-- Header / toolbar -->
        <header class="toolbar">
            <h1>Machine Shop Scheduler</h1>
            <div class="toolbar-right">
                <span class="key"><span class="key-dot proc-mill-dot"></span> Mill</span>
                <span class="key"><span class="key-dot proc-turn-dot"></span> Turn</span>
                <a href="/api/auto" role="button" class="primary">Auto Schedule</a>
                <a href="/api/reset" role="button" class="contrast">Reset</a>
            </div>
        </header>

        <!-- Backlog -->
        <section class="panel">
            <header><strong>Backlog</strong></header>
            <div id="backlogRegion" class="backlog">
                {{range .Backlog}}
                {{$done := index $.JobMinsDone .ID}}
                {{$total := mul .Qty .CycleMins}}
                {{$rem := sub $total $done}}
                <span class="chip" data-kind="backlog" data-name="{{.Name}}" data-total="{{$total}}"
                    data-remaining="{{max0 $rem}}">
                    <b>{{.Name}}</b>
                    <small>({{minsToHM (max0 $rem)}} left / {{minsToHM $total}})</small>
                    <span class="proc-chip {{if eq .Process " mill"}} proc-mill {{else}} proc-turn {{end}}">
                        {{procTitle .Process}}
                    </span>
                </span>
                {{end}}
                {{if not .Backlog}}
                <span class="chip"><b>All caught up ðŸŽ‰</b></span>
                {{end}}
            </div>
        </section>

        <!-- Schedule -->
        <section class="panel">
            <header><strong>Schedule (Week of {{.WeekStart.Format "Mon Jan 2, 2006"}})</strong></header>

            <div class="layout">
                <!-- LEFT: Machines (sticky column) -->
                <div class="left-col">
                    <div class="row h12"></div> <!-- spacer to align with header row -->
                    {{range $i, $m := .Machines}}
                    <div class="machine-card" data-i="{{$i}}">
                        <div class="machine-name">{{$m.Name}}</div>
                        {{- $hasMill := hasProc $m "mill" -}}
                        {{- $hasTurn := hasProc $m "turn" -}}
                        <small class="muted">
                            Supports:
                            {{- if and (not $hasMill) (not $hasTurn) -}}â€”{{- else -}}
                            {{- if $hasMill }}Mill{{ end -}}{{- if and $hasMill $hasTurn }}, {{ end -}}{{- if $hasTurn
                            }}Turn{{ end -}}
                            {{- end -}}
                        </small>
                    </div>
                    {{end}}
                </div>

                <!-- RIGHT: One shared scroller (header + all machine rows) -->
                <div id="calendarWrap" class="right-col">
                    <!-- header row -->
                    <div class="grid-row">
                        <div class="sep h12"></div>
                        {{range .Days}}
                        <div class="day-head h12">
                            <div class="dow">{{.Format "Mon"}}</div>
                            <div class="date">{{.Format "Jan 2"}}</div>
                        </div>
                        {{end}}
                    </div>

                    <!-- machine rows -->
                    {{range $i, $m := .Machines}}
                    <div class="grid-row machine-row" data-i="{{$i}}">
                        <div class="sep"></div>

                        {{range $di, $d := $.Days}}
                        {{ $dayLabel := ($d).Format "Mon 1/2" }}
                        <div class="day-cell">
                            <!-- Day shift -->
                            <section class="shift">
                                <header>Day shift</header>
                                <div class="lane-blocks" x-data="laneShadows()" x-init="init($el)"
                                    @scroll="onScroll($el)">
                                    {{range $a := $.Assignments}}
                                    {{if and (eq $a.MachineID $m.ID) (eq $a.DayIndex $di) (eq $a.Shift "day") }}
                                    {{$job := index $.JobByID $a.JobID}} {{$mac := index $.MacByID $a.MachineID}}
                                    {{$bg := empClass $a.EmployeeID}}
                                    <div class="job-tile {{if eq $a.Process " mill"}}proc-mill{{else}}proc-turn{{end}}"
                                        style="max-width:0; {{if $a.EmployeeID}}background-color: {{$bg}};{{else}}background-color: rgba(55,65,81,0.5); outline: 1px solid rgba(239,68,68,0.4);{{end}}"
                                        data-kind="assign" data-name="{{$job.Name}}"
                                        data-hours="{{minsToHM $a.Minutes}}" data-pieces="{{$a.Pieces}}"
                                        data-cycle="{{$a.CycleMins}}" data-proc="{{procTitle $a.Process}}"
                                        data-machine="{{$mac.Name}}"
                                        data-employee="{{with (index $.EmpByID $a.EmployeeID)}}{{.Name}}{{else}}â€”{{end}}"
                                        data-day='{{$dayLabel}}' data-shift="Day"
                                        x-data="{ target: `{{pctMins $a.Minutes}}` }"
                                        x-init="requestAnimationFrame(() => { $el.style.transition='max-width .30s ease'; $el.style.maxWidth=`calc(${target} - .25rem)`; })">
                                        <strong>{{$job.Name}}</strong>
                                        <small>{{minsToHM $a.Minutes}} â€¢ {{procTitle $a.Process}} â€¢
                                            {{$mac.Name}}</small>
                                        <small>{{$a.Pieces}} pcs @ {{$a.CycleMins}}m â€¢ Op: {{with (index $.EmpByID
                                            $a.EmployeeID)}}{{.Name}}{{else}}â€”{{end}}</small>
                                    </div>
                                    {{end}}
                                    {{end}}
                                </div>
                            </section>

                            <!-- Night shift -->
                            <section class="shift">
                                <header>Night shift</header>
                                <div class="lane-blocks" x-data="laneShadows()" x-init="init($el)"
                                    @scroll="onScroll($el)">
                                    {{range $a := $.Assignments}}
                                    {{if and (eq $a.MachineID $m.ID) (eq $a.DayIndex $di) (eq $a.Shift "night") }}
                                    {{$job := index $.JobByID $a.JobID}} {{$mac := index $.MacByID $a.MachineID}}
                                    {{$bg := empClass $a.EmployeeID}}
                                    <div class="job-tile {{if eq $a.Process " mill"}}proc-mill{{else}}proc-turn{{end}}"
                                        style="max-width:0; {{if $a.EmployeeID}}background-color: {{$bg}};{{else}}background-color: rgba(55,65,81,0.5); outline: 1px solid rgba(239,68,68,0.4);{{end}}"
                                        data-kind="assign" data-name="{{$job.Name}}"
                                        data-hours="{{minsToHM $a.Minutes}}" data-pieces="{{$a.Pieces}}"
                                        data-cycle="{{$a.CycleMins}}" data-proc="{{procTitle $a.Process}}"
                                        data-machine="{{$mac.Name}}"
                                        data-employee="{{with (index $.EmpByID $a.EmployeeID)}}{{.Name}}{{else}}â€”{{end}}"
                                        data-day='{{$dayLabel}}' data-shift="Night"
                                        x-data="{ target: `{{pctMins $a.Minutes}}` }"
                                        x-init="requestAnimationFrame(() => { $el.style.transition='max-width .30s ease'; $el.style.maxWidth=`calc(${target} - .25rem)`; })">
                                        <strong>{{$job.Name}}</strong>
                                        <small>{{minsToHM $a.Minutes}} â€¢ {{procTitle $a.Process}} â€¢
                                            {{$mac.Name}}</small>
                                        <small>{{$a.Pieces}} pcs @ {{$a.CycleMins}}m â€¢ Op: {{with (index $.EmpByID
                                            $a.EmployeeID)}}{{.Name}}{{else}}â€”{{end}}</small>
                                    </div>
                                    {{end}}
                                    {{end}}
                                </div>
                            </section>
                        </div>
                        {{end}}
                    </div>
                    {{end}}
                </div>
            </div>
        </section>
    </main>

    <!-- Minimal Alpine helpers you already use -->
    <script>
        function schedulerUI() {
            return {
                rowObserver: null,
                init() {
                    this.$nextTick(() => {
                        this.observeRowHeights();
                    });
                    window.addEventListener('resize', () => this.syncAllHeights());
                },
                observeRowHeights() {
                    if (this.rowObserver) this.rowObserver.disconnect();
                    this.rowObserver = new ResizeObserver(entries => {
                        entries.forEach(entry => {
                            const i = entry.target.dataset.i;
                            if (i == null) return;
                            const h = Math.ceil(entry.contentRect.height);
                            const card = document.querySelector(`.machine-card[data-i="${i}"]`);
                            if (card) card.style.height = `${h}px`;
                        });
                    });
                    document.querySelectorAll('.machine-row').forEach(row => this.rowObserver.observe(row));
                    this.syncAllHeights();
                },
                syncAllHeights() {
                    document.querySelectorAll('.machine-row').forEach(row => {
                        const i = row.dataset.i;
                        const h = Math.ceil(row.getBoundingClientRect().height);
                        const card = document.querySelector(`.machine-card[data-i="${i}"]`);
                        if (card) card.style.height = `${h}px`;
                    });
                }
            }
        }
        function laneShadows() {
            return {
                init() { /* placeholder for your existing scroll shadow logic if any */},
                onScroll() { },
            }
        }
    </script>
    <div id="hoverCard" class="hover-card" style="display:none; position:fixed; z-index:2000;"></div>

    <script>
        const card = document.getElementById("hoverCard");

        function showCard(el, evt) {
            const d = el.dataset;
            card.innerHTML = `
      <article>
        <header><strong>${d.name}</strong></header>
        <p><small>${d.hours} â€¢ ${d.proc} â€¢ ${d.machine}</small></p>
        <p><small>${d.pieces} pcs @ ${d.cycle}m</small></p>
        <p><small>Op: ${d.employee}</small></p>
        <p><small>${d.day} â€¢ ${d.shift}</small></p>
      </article>
    `;
            card.style.display = "block";
            moveCard(evt);
        }

        function hideCard() {
            card.style.display = "none";
        }

        function moveCard(evt) {
            const offset = 15;
            card.style.left = evt.pageX + offset + "px";
            card.style.top = evt.pageY + offset + "px";
        }

        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".job-tile").forEach(tile => {
                tile.addEventListener("mouseenter", e => showCard(tile, e));
                tile.addEventListener("mousemove", moveCard);
                tile.addEventListener("mouseleave", hideCard);
            });
        });
    </script>
</body>

</html>
{{end}}
